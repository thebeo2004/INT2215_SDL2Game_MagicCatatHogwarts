#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <stdio.h>
#include <string>

using namespace std;

const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;

bool init();
bool loadMedia();
void close();

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;
SDL_Texture* gTexture = NULL;

SDL_Texture* loadTexture(std::string path);

bool init()
{
    if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
        return false;
    
    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");

    gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (gWindow == NULL)
        return false;
    
    gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
    if (gRenderer == NULL)
        return false;

    SDL_SetRenderDrawColor(gRenderer, 255, 255, 255, 255);

    int imgFlags = IMG_INIT_PNG;
    if (!(IMG_Init(imgFlags) && imgFlags))
        return false;
    
    return true;
}

bool loadMedia()
{
    gTexture = loadTexture("background.png");
    if (gTexture == NULL)
        return false;
    return true;
}

void close()
{
    SDL_DestroyTexture(gTexture);
    gTexture = NULL;

    SDL_DestroyRenderer(gRenderer);
    SDL_DestroyWindow(gWindow);
    gWindow = NULL;
    gRenderer = NULL;

    IMG_Quit();
    SDL_Quit();
}

SDL_Texture* loadTexture(std::string path)
{
    SDL_Texture* newTexture = NULL;

    SDL_Surface* loadedSurface = IMG_Load(path.c_str());

    newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
    
    SDL_FreeSurface(loadedSurface);

    return newTexture;
}

int main(int argc, char * args[])
{
    if (!init()) return -1;
    if (!loadMedia()) return -1;

    SDL_Event e;

    while(true)
    {
        if (SDL_PollEvent(&e) == 0) continue;
        if (e.type == SDL_QUIT) break;

        SDL_SetRenderDrawColor(gRenderer, 255, 255, 255, 0);
        SDL_RenderClear(gRenderer);
        
        SDL_RenderCopy(gRenderer, gTexture, NULL, NULL);
        SDL_RenderPresent(gRenderer);
    }

    close();
}

